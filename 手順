環境構築の本を参考に手順を簡単に記載
大切なところは，nodeでどこまで環境が構築され，どこまで自分で新規作成や編集を行わなければいけないのか

o 1.TopDir ok
o 2.TopDirのts-config.json作成 ok
o 3.backDir frontDirの作成 ok

------------------------------back and front--------------------------------
o 1.dist src build ディレクトリの作成

-----------------------------------------------------front react ------------------
o 4f.yarn init -y -> package.json生成
o 5f.yarn add --save-dev typescript　→　typescriptの構築
o 6f.ts-configの作成　→ コマンドでも可能だが，バージョン等の情報はないため，自作で設定ファイルを作成した方が良さそう -> ok
o 7f.yarn install -D webpack webpack-cil  -> webpackのインストール
o 8f.yarn install -D ts-loader
o 9f.webpack.config.jsの作成（自作） ok
o 10f.yarn install react react-dom -> reactのインストール
o 11f.yarn install -D @types/react @types/react-dom
o 12f.src/index.tsxの作成　→　react,react-domをインポートしてレンダー
13f.npx webpack -> distにビルド（distは元々作成する必要あり？）
o 14f.yarn install -D html-webpack-plugin -> distにビルドされたものをHTMLで確認できるようにするため.htmlを指定するだけで，ビルド生成先のフォルダにHTMLファイルを作成してくれる
o 15f.src/index.htmlにテンプレートとなるHtmlを用意　（自作）
o 16f.webpack.config.jsの中を編集　→　ビルドのコマンド（13をしなくていいなら，一括でこのフェーズでWebpack.configは作った方が良さそう
o 17f.yarn install -D webpack-dev-server live reloading 機能がついている npx webpack-dev-server で起動するのでこの設定をpackage.jsonのscripts蘭に記入する？
o 18f.yarn install -D css-loader style-loader file-loader -> 静的ファイルのバンドル
o 19f.webpack.config.jsの中を編集　ok


-----------------------------------------back------------------------------------
touch build/index.js
argv=`pwd`
o git init
o yarn init -y
# node ~/my_command/createEnvJSScripts/package/createInitPackage.js ${argv} ${1}
o yarn add --save-dev  typescript
o yarn add --save-dev  tsc-watch
o yarn add @types/node ts-node tsconfig-paths   package.json ni register
o yarn add -D jest 
o yarn add -D @types/jest ts-jest 
yarn add @types/express 
yarn add express 
node ~/my_command/createEnvJSScripts/jest/jestConfig.js ${argv} ${1}
node ~/my_command/createEnvJSScripts/change.js ${argv}
create-eslint-prettier-back
cd ..
node ~/my_command/createEnvJSScripts/git/createGitIgnore.js ${1}
echo "{
  \"compilerOptions\": {
    \"outDir\": \"./dist\",
    \"target\": \"ES2015\",
    \"moduleResolution\": \"node\",
    \"module\": \"commonjs\",
    \"strict\": true,
    \"baseUrl\":\"src\"
  },
  \"include\": [
    \"./src/**/*\"
  ],
  \"exclude\": [\"./node_modules\"]
}" > tsconfig.json
cd ../
-----------------------------------------prettier eslint husky----------------------------
o 1p-e.yarn add -D husky eslint lint-staged prettier eslint-config-prettier eslint-plugin-prettier　-> eslint prettierを合わせるために必要なものやハスキーをインストール
o 2p-e.yarn add -D @typescript-eslint/parser @typescript-eslint/eslint-plugin　eslint-plugin-react
o 3p-e.package.jsonにlint-stagedの項目を追加 ----ok
o 4p-e.npx husky install -> huskyの準備
o 5p-e.npx husky add .husky/pre-commit "yarn lint-staged"
o 6p-e.package.jsonのscriptsでlint-fix，lint-stagedできるように編集(なるだけまとめたい) ok
o 7p-e..eslintrc.jsをReact用に作成
o 8p-e.package.jsonにprettier蘭を追加  ----------ok

------------------------------------------------jest--------------------------------------
o 1j.yarn install -D jest @types/jest ts-jest
o 2j.jest.config.jsの作成
o 3j.webpack.config.jsにresolve蘭を追加 ok
4j.__mocks__ディレクトリの追加

----------------------------------------------jest react ---------------------------------
o 1jr. yarn install -D @testing-library/react @testing-library/jest-dom

--------------------------------------------storybook--------------------------------------------------
1s.npx -p @storybook/cli sb init
2. .storybook/main.jsを作成．中身も自作


-----------------------------------------git----------------
o git init
o touch .gitIgnore